import os
import django

# –£–∫–∞–∑—ã–≤–∞–µ–º Django, –∫–∞–∫–æ–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_delivery.settings')  # –ó–∞–º–µ–Ω–∏ flower_delivery –Ω–∞ –∏–º—è —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
print("DJANGO_SETTINGS_MODULE:", os.environ.get('DJANGO_SETTINGS_MODULE'))  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
django.setup()


from decouple import config
import telebot
from main.models import User, Order
import requests  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from django.conf import settings  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å ID –∞–¥–º–∏–Ω–∞ –∏–∑ settings.py
from django.utils.timezone import now
from main.reports import generate_text_report  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç—á–µ—Ç–∞
from datetime import datetime



# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = config("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)


def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
    response = requests.post(url, data=payload)
    return response.json()  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    args = message.text.split()
    if len(args) > 1: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ
        user_id = args[1] # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        print("–ü–æ–ª—É—á–µ–Ω user_id:", user_id)  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ user_id
        try:
            user = User.objects.get(id=user_id)
            print("–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", user)  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.telegram_chat_id = message.chat.id # –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –≤ –º–æ–¥–µ–ª–∏ User
            user.save()
            print(f"Telegram ID {message.chat.id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
            user_from_db = User.objects.get(pk=user.id)
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: Telegram ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚Äî {user_from_db.telegram_chat_id}")

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID –∫ –∑–∞–∫–∞–∑–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            orders = Order.objects.filter(user=user)
            print(f"–ù–∞–π–¥–µ–Ω—ã –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}: {[order.id for order in orders]}")
            for order in orders:
                order.telegram_chat_id = message.chat.id
                order.save()
                print(f"–û–±–Ω–æ–≤–ª—ë–Ω –∑–∞–∫–∞–∑ #{order.id} —Å telegram_chat_id {message.chat.id}")  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

            bot.reply_to(message, "–í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö.")
        except User.DoesNotExist:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            bot.reply_to(message, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.")


# –ö–æ–º–∞–Ω–¥–∞ /connect –¥–ª—è —Å–≤—è–∑–∏ Telegram ID —Å –∑–∞–∫–∞–∑–æ–º
@bot.message_handler(commands=['connect'])
def connect_user(message):
    chat_id = message.chat.id
    username = message.from_user.username

    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_order = Order.objects.filter(user__username=username).last()
    if active_order:
        active_order.telegram_chat_id = chat_id
        active_order.save()
        bot.reply_to(message, "–í–∞—à Telegram ID —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–∫–∞–∑–æ–º!")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")



# –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---------------------------------

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ settings.py)
ADMIN_TELEGRAM_ID = settings.ADMIN_TELEGRAM_ID

def is_admin(chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return str(chat_id) in settings.ADMIN_TELEGRAM_ID


@bot.message_handler(commands=['admin_panel'])
def admin_panel(message):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é """
    if str(message.chat.id) != str(ADMIN_TELEGRAM_ID):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üìä –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"))
    markup.add(KeyboardButton("üí∞ –í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"), KeyboardButton("üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"))

    bot.send_message(message.chat.id, "üì¢ *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*", parse_mode="Markdown", reply_markup=markup)


# –û—Ç—á–µ—Ç (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª) –∑–∞ —Å–µ–≥–æ–¥–Ω—è - –¥–ª—è –ê–¥–º–∏–Ω–∞
@bot.message_handler(func=lambda message: message.text == "üìä –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
def send_text_report(message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    report_text = generate_text_report()
    report_path = "report_today.txt"

    with open(report_path, "w", encoding="utf-8") as file:
        file.write(report_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –¢–µ–ª–µ–≥—Ä–∞–º
    with open(report_path, "rb") as file:
        bot.send_document(message.chat.id, file, caption="üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è")

    os.remove(report_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏


# –û—Ç—á–µ—Ç –í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è - –¥–ª—è –ê–¥–º–∏–Ω–∞
@bot.message_handler(func=lambda message: message.text == "üí∞ –í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
def send_daily_revenue(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –°—á–∏—Ç–∞–µ–º –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().date()
    orders_today = Order.objects.filter(created_at__date=today)
    revenue_today = sum(order.total_price for order in orders_today)

    bot.send_message(
        message.chat.id,
        f"üí∞ *–í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n{revenue_today} —Ä—É–±.",
        parse_mode="Markdown",
    )


# –û—Ç—á–µ—Ç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è - –¥–ª—è –ê–¥–º–∏–Ω–∞
@bot.message_handler(func=lambda message: message.text == "üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
def send_daily_orders_count(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().date()
    orders_today_count = Order.objects.filter(created_at__date=today).count()

    bot.send_message(
        message.chat.id,
        f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n{orders_today_count} –∑–∞–∫–∞–∑(–æ–≤).",
        parse_mode="Markdown",
    )




def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()

if __name__ == "__main__":
    main()

