import os
import django

# –£–∫–∞–∑—ã–≤–∞–µ–º Django, –∫–∞–∫–æ–π —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_delivery.settings')  
print("DJANGO_SETTINGS_MODULE:", os.environ.get('DJANGO_SETTINGS_MODULE'))  # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
django.setup()


import telebot
import requests  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from decouple import config
from main.models import User, Order
from main.reports import generate_text_report  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç—á–µ—Ç–∞
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from django.conf import settings  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å ID –∞–¥–º–∏–Ω–∞ –∏–∑ settings.py
from django.urls import reverse
from datetime import datetime



# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = config("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)
MY_SITE = config("SITE_URL")
ADMIN_TELEGRAM_ID = settings.ADMIN_TELEGRAM_ID


def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
    response = requests.post(url, data=payload)
    return response.json()  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏


# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    args = message.text.split()
    if len(args) > 1: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ
        user_id = args[1] # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        try:
            user = User.objects.get(id=user_id)
            user.telegram_chat_id = message.chat.id # –°–æ—Ö—Ä–∞–Ω—è–µ–º Telegram ID –≤ –º–æ–¥–µ–ª–∏ User
            user.save()
            user_from_db = User.objects.get(pk=user.id)

            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram ID –∫ –∑–∞–∫–∞–∑–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            orders = Order.objects.filter(user=user)
            for order in orders:
                order.telegram_chat_id = message.chat.id
                order.save()

            bot.reply_to(message, "–í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö.")
        except User.DoesNotExist:
            bot.reply_to(message, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")



    if str(message.chat.id) == ADMIN_TELEGRAM_ID:
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å—Ä–∞–∑—É –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_panel(message)
    else:
        # –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç"), KeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"))
        bot.send_message(
            message.chat.id,
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FlowerDelivery! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–∞—à —Å–∞–π—Ç.",
            reply_markup=markup,
        )


# –ö–Ω–æ–ø–∫–∞ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç - –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == "üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç")
def go_to_site(message):
    bot.send_message(
        message.chat.id,
        f"üåê –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç:\n[–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç]({MY_SITE})",
        parse_mode="Markdown",
    )


# –ö–Ω–æ–ø–∫–∞ –ú–æ–∏ –∑–∞–∫–∞–∑—ã - –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: message.text == "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
def my_orders(message):
    user = User.objects.filter(telegram_chat_id=message.chat.id).first()

    if not user:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.")
        return

    orders = Order.objects.filter(user=user).order_by('-created_at')[:5]

    if not orders.exists():
        bot.send_message(message.chat.id, "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    orders_message = "üì¶ *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:*\n\n"

    for order in orders:
        orders_message += f"üîπ *–ó–∞–∫–∞–∑ ‚Ññ{order.id}*\n"
        orders_message += f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        orders_message += f"üîÑ –°—Ç–∞—Ç—É—Å: {order.get_status_display()}\n"
        orders_message += f"üíê –ë—É–∫–µ—Ç: {order.products.first().name if order.products.exists() else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"

        # –°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–î–æ—Å—Ç–∞–≤–ª–µ–Ω" –∏ –æ—Ç–∑—ã–≤ –Ω–µ –æ—Å—Ç–∞–≤–ª–µ–Ω
        if order.status == "delivered" and not hasattr(order, "review"):
            review_url = f"{MY_SITE}{reverse('leave_review', args=[order.id])}"
            orders_message += f"üìù [–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤]({review_url})\n"

        # –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
        reorder_url = f"{MY_SITE}{reverse('product_detail', args=[order.products.first().id])}"
        orders_message += f"üîÑ [–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑]({reorder_url})\n"

        orders_message += "------------------------\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç
    orders_message += f"\nüåê [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã]({MY_SITE}/orders/)"

    bot.send_message(
        message.chat.id,
        orders_message,
        parse_mode="Markdown"
    )




# –ö–æ–º–∞–Ω–¥–∞ /connect –¥–ª—è —Å–≤—è–∑–∏ Telegram ID —Å –∑–∞–∫–∞–∑–æ–º
@bot.message_handler(commands=['connect'])
def connect_user(message):
    chat_id = message.chat.id
    username = message.from_user.username

    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_order = Order.objects.filter(user__username=username).last()
    if active_order:
        active_order.telegram_chat_id = chat_id
        active_order.save()
        bot.reply_to(message, "–í–∞—à Telegram ID —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º –∑–∞–∫–∞–∑–æ–º!")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")



# ----------- –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---------------------------------

def is_admin(chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return str(chat_id) in settings.ADMIN_TELEGRAM_ID


@bot.message_handler(commands=['admin_panel'])
def admin_panel(message):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é """
    if str(message.chat.id) != str(ADMIN_TELEGRAM_ID):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏.")
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üìä –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"))
    markup.add(KeyboardButton("üí∞ –í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"), KeyboardButton("üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"))

    bot.send_message(message.chat.id, "üì¢ *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*", parse_mode="Markdown", reply_markup=markup)


# –û—Ç—á–µ—Ç (—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª) –∑–∞ —Å–µ–≥–æ–¥–Ω—è - –¥–ª—è –ê–¥–º–∏–Ω–∞
@bot.message_handler(func=lambda message: message.text == "üìä –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
def send_text_report(message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    report_text = generate_text_report()
    report_path = "report_today.txt"

    with open(report_path, "w", encoding="utf-8") as file:
        file.write(report_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –¢–µ–ª–µ–≥—Ä–∞–º
    with open(report_path, "rb") as file:
        bot.send_document(message.chat.id, file, caption="üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è")

    os.remove(report_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏


# –û—Ç—á–µ—Ç –í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è - –¥–ª—è –ê–¥–º–∏–Ω–∞
@bot.message_handler(func=lambda message: message.text == "üí∞ –í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
def send_daily_revenue(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –°—á–∏—Ç–∞–µ–º –≤—ã—Ä—É—á–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().date()
    orders_today = Order.objects.filter(created_at__date=today)
    revenue_today = sum(order.total_price for order in orders_today)

    bot.send_message(
        message.chat.id,
        f"üí∞ *–í—ã—Ä—É—á–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n{revenue_today} —Ä—É–±.",
        parse_mode="Markdown",
    )


# –û—Ç—á–µ—Ç –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è - –¥–ª—è –ê–¥–º–∏–Ω–∞
@bot.message_handler(func=lambda message: message.text == "üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
def send_daily_orders_count(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today = datetime.now().date()
    orders_today_count = Order.objects.filter(created_at__date=today).count()

    bot.send_message(
        message.chat.id,
        f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n{orders_today_count} –∑–∞–∫–∞–∑(–æ–≤).",
        parse_mode="Markdown",
    )




def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()

if __name__ == "__main__":
    main()

