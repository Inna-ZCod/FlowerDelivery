from django.db import models
from django.contrib.auth.models import User, AbstractUser
from django.db.models import Sum
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils import timezone
from django.conf import settings
from django.core.validators import MinValueValidator, MaxValueValidator



# –†–∞—Å—à–∏—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –º–æ–¥–µ–ª—å User
User.add_to_class('telegram_chat_id', models.CharField(max_length=50, blank=True, null=True))


# –ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞ (–±—É–∫–µ—Ç–∞)
class Product(models.Model):
    name = models.CharField(max_length=255)  # –ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞
    description = models.TextField(blank=True)  # –û–ø–∏—Å–∞–Ω–∏–µ
    price = models.DecimalField(max_digits=10, decimal_places=2)  # –¶–µ–Ω–∞
    image = models.ImageField(upload_to='products/')  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–∫–µ—Ç–∞

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä"  # –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ
        verbose_name_plural = "–¢–æ–≤–∞—Ä—ã"  # –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ


# –ú–æ–¥–µ–ª—å –∑–∞–∫–∞–∑–∞
class Order(models.Model):
    STATUS_CHOICES = [
        ('accepted', '–ü—Ä–∏–Ω—è—Ç'),
        ('assembling', '–í —Å–±–æ—Ä–∫–µ'),
        ('on_the_way', '–í –ø—É—Ç–∏'),
        ('delivered', '–î–æ—Å—Ç–∞–≤–ª–µ–Ω'),
    ]
    user = models.ForeignKey(User, on_delete=models.CASCADE)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    products = models.ManyToManyField(Product)  # –ë—É–∫–µ—Ç—ã
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='accepted')  # –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    total_price = models.DecimalField(max_digits=10, decimal_places=2)  # –û–±—â–∞—è —Ü–µ–Ω–∞
    created_at = models.DateTimeField(auto_now_add=True)  # –î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    telegram_chat_id = models.CharField(max_length=50, blank=True, null=True)  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    address = models.TextField(blank=True)  # –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    card_text = models.TextField(blank=True)  # –¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ
    signature = models.CharField(max_length=255, blank=True)  # –ü–æ–¥–ø–∏—Å—å

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ #{self.id} - {self.status}"

    class Meta:
        verbose_name = "–ó–∞–∫–∞–∑"
        verbose_name_plural = "–ó–∞–∫–∞–∑—ã"

    # –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    def save(self, *args, **kwargs):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        if self.pk:
            try:
                old_order = Order.objects.get(pk=self.pk)
            except Order.DoesNotExist:
                old_order = None

            if old_order and old_order.status != self.status:
                # ‚úÖ –û—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç `send_telegram_message`, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
                from telegram_bot import send_telegram_message

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
                message_text = (
                    f"üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ{self.id}!\n\n"
                    f"üîÑ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: *{self.get_status_display()}*\n"
                    f"üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {self.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üíê –ë—É–∫–µ—Ç: {self.products.first().name if self.products.exists() else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"üí∞ –¶–µ–Ω–∞: {self.total_price} —Ä—É–±.\n\n"
                    "üîî –û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!"
                )

                if self.telegram_chat_id:
                    send_telegram_message(self.telegram_chat_id, message_text)

        super().save(*args, **kwargs)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ #{self.id} - {self.user}"


# –ú–æ–¥–µ–ª—å –æ—Ç–∑—ã–≤–∞
class Review(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    product = models.ForeignKey(Product, on_delete=models.CASCADE)  # –¢–æ–≤–∞—Ä
    order = models.OneToOneField(Order, on_delete=models.CASCADE, related_name="review", blank=True)  # –°–≤—è–∑—å —Å –∑–∞–∫–∞–∑–æ–º (1 –æ—Ç–∑—ã–≤ –Ω–∞ 1 –∑–∞–∫–∞–∑)
    text = models.TextField(blank=True, null=True)  # –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
    rating = models.PositiveIntegerField(
        validators=[MinValueValidator(1), MaxValueValidator(5)]
    )  # –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 1 –¥–æ 5
    created_at = models.DateTimeField(auto_now_add=True)  # –î–∞—Ç–∞ –æ—Ç–∑—ã–≤–∞

    def __str__(self):
        return f"–û—Ç–∑—ã–≤ –æ—Ç {self.user.username} - {self.rating} ‚≠ê"

    class Meta:
        verbose_name = "–û—Ç–∑—ã–≤"
        verbose_name_plural = "–û—Ç–∑—ã–≤—ã"
        unique_together = ('user', 'order')  # –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –∫ –æ–¥–Ω–æ–º—É –∑–∞–∫–∞–∑—É


# –º–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–∑–∏–Ω–µ
class Cart(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ—Ä–∑–∏–Ω—ã
    product = models.ForeignKey(Product, on_delete=models.CASCADE)  # –¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    address = models.TextField(blank=True, default="")  # –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
    card_text = models.TextField(blank=True, default="")  # –¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ
    signature = models.CharField(max_length=255, blank=True, default="")  # –ü–æ–¥–ø–∏—Å—å

    def __str__(self):
        return f"{self.product.name} –¥–ª—è {self.user.username}"