from main.models import Order, User
from datetime import datetime, timedelta


def generate_text_report():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã."""
    today = datetime.now().date()
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)

    # –í—Å–µ –∑–∞–∫–∞–∑—ã
    all_orders = Order.objects.all()
    orders_today = all_orders.filter(created_at__date=today)
    orders_week = all_orders.filter(created_at__date__gte=week_ago)
    orders_month = all_orders.filter(created_at__date__gte=month_ago)

    # –ü–æ–¥—Å—á–µ—Ç—ã
    total_orders_all_time = all_orders.count()
    total_orders_today = orders_today.count()
    total_orders_week = orders_week.count()
    total_orders_month = orders_month.count()

    revenue_today = sum(order.total_price for order in orders_today)
    revenue_week = sum(order.total_price for order in orders_week)
    revenue_month = sum(order.total_price for order in orders_month)
    revenue_all_time = sum(order.total_price for order in all_orders)

    average_check = revenue_all_time / total_orders_all_time if total_orders_all_time > 0 else 0

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è)
    status_counts = {status: all_orders.filter(status=status).count() for status in ["accepted", "assembling", "on_the_way", "delivered"]}

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–¢–û–ü-5)
    user_orders = {}
    for user in User.objects.filter(order__in=all_orders).distinct():
        user_orders[user.username] = all_orders.filter(user=user).count()
    top_users = sorted(user_orders.items(), key=lambda x: x[1], reverse=True)[:5]  # –¢–û–ü-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –±—É–∫–µ—Ç—ã (–¢–û–ü-5)
    bouquet_counts = {}
    for order in all_orders:
        for product in order.products.all():
            bouquet_counts[product.name] = bouquet_counts.get(product.name, 0) + 1
    top_bouquets = sorted(bouquet_counts.items(), key=lambda x: x[1], reverse=True)[:5]  # –¢–û–ü-5 –±—É–∫–µ—Ç–æ–≤

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    report_content = (
        f"üìÖ –û—Ç—á–µ—Ç –∑–∞ {today.strftime('%d.%m.%Y')}\n\n"
        f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤:*\n"
        f"   - –°–µ–≥–æ–¥–Ω—è: {total_orders_today}\n"
        f"   - –ó–∞ –Ω–µ–¥–µ–ª—é: {total_orders_week}\n"
        f"   - –ó–∞ –º–µ—Å—è—Ü: {total_orders_month}\n"
        f"   - –í—Å–µ–≥–æ: {total_orders_all_time}\n\n"
        f"üí∞ *–í—ã—Ä—É—á–∫–∞:*\n"
        f"   - –°–µ–≥–æ–¥–Ω—è: {revenue_today} —Ä—É–±.\n"
        f"   - –ó–∞ –Ω–µ–¥–µ–ª—é: {revenue_week} —Ä—É–±.\n"
        f"   - –ó–∞ –º–µ—Å—è—Ü: {revenue_month} —Ä—É–±.\n"
        f"   - –í—Å–µ–≥–æ: {revenue_all_time} —Ä—É–±.\n\n"
        f"üí≥ *–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:* {average_check:.2f} —Ä—É–±.\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º (–≤—Å–µ –≤—Ä–µ–º—è):*\n"
        f"   ‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: {status_counts['accepted']}\n"
        f"   üõ† –í —Å–±–æ—Ä–∫–µ: {status_counts['assembling']}\n"
        f"   üöö –í –ø—É—Ç–∏: {status_counts['on_the_way']}\n"
        f"   üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {status_counts['delivered']}\n\n"
        f"üë• *–¢–û–ü-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–∫–∞–∑–∞–º:*\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –¢–û–ü-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if top_users:
        for user, count in top_users:
            report_content += f"   - {user}: {count} –∑–∞–∫–∞–∑(–æ–≤)\n"
    else:
        report_content += "   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –¢–û–ü-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤
    report_content += "\nüå∏ *–¢–û–ü-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤:*\n"
    if top_bouquets:
        for bouquet, count in top_bouquets:
            report_content += f"   - {bouquet}: {count} —Ä–∞–∑(–∞)\n"
    else:
        report_content += "   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n"

    return report_content