from django.shortcuts import render, get_object_or_404, redirect
from django.contrib import messages
from django.contrib.auth.models import User
from django.contrib.auth.forms import PasswordChangeForm
from django.contrib.auth import login, logout, update_session_auth_hash
from .forms import OrderForm, UserRegistrationForm
from .models import Product, Cart, Order
from django import template
from telegram_bot import send_telegram_message

# —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∏ –∏ –ø–æ–¥–ø–∏—Å–∏
register = template.Library()

@register.filter
def get_card_text(card_info):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å"""
    for label, value in card_info:
        if label == "–¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ:":
            return value
    return ""

@register.filter
def get_signature(card_info):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å"""
    for label, value in card_info:
        if label == "–ü–æ–¥–ø–∏—Å—å:":
            return value
    return ""


def catalog(request):
    products = Product.objects.all()
    return render(request, 'main/catalog.html', {'products': products})

def product_detail(request, product_id):
    product = get_object_or_404(Product, id=product_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
    return render(request, 'main/product_detail.html', {'product': product})


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
def register(request):
    if request.method == 'POST':
        form = UserRegistrationForm(request.POST)
        if form.is_valid():
            user = form.save(commit=False)
            user.set_password(form.cleaned_data['password'])
            user.save()
            login(request, user)
            return redirect('connect_bot')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É Telegram
    else:
        form = UserRegistrationForm()
    return render(request, 'main/register.html', {'form': form})

#  –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –±–æ—Ç–∞
def connect_bot(request):
    return render(request, 'main/connect_bot.html')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
def add_to_cart(request, product_id):
    product = Product.objects.get(id=product_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    if not request.user.is_authenticated:
        return redirect('login')

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∫–æ—Ä–∑–∏–Ω–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    Cart.objects.create(
        user=request.user,
        product=product
    )

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≥–¥–µ –±—ã–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    return redirect(request.META.get('HTTP_REFERER', 'catalog'))


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
def cart(request):
    if not request.user.is_authenticated:
        return redirect('login')

    cart_items = Cart.objects.filter(user=request.user)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
    for item in cart_items:
        item.total_price = item.product.price  # "–ò—Ç–æ–≥–æ" –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏ ‚Äî —ç—Ç–æ —Ü–µ–Ω–∞ —Å–∞–º–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    total_price = sum(item.product.price for item in cart_items)  # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
    return render(request, 'main/cart.html', {'cart_items': cart_items, 'total_price': total_price})


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
def delete_cart_item(request, cart_item_id):
    cart_item = get_object_or_404(Cart, id=cart_item_id, user=request.user)
    cart_item.delete()
    return redirect('cart')




# –ù–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–æ—Ä–∑–∏–Ω—ã
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä—è–º–æ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
def confirm_order(request):
    if not request.user.is_authenticated:
        return redirect('login')

    cart_items = Cart.objects.filter(user=request.user)
    if not cart_items:
        messages.error(request, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.")
        return redirect('cart')

    if request.method == "POST":
        missing_addresses = [item for item in cart_items if not request.POST.get(f"address_{item.id}", "").strip()]
        if missing_addresses:
            messages.warning(request, "–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ.")
            return redirect('cart')

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Cart
        for item in cart_items:
            item.address = request.POST.get(f"address_{item.id}", "").strip()
            item.card_text = request.POST.get(f"card_text_{item.id}", "").strip()
            item.signature = request.POST.get(f"signature_{item.id}", "").strip()
            item.save()

    # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    order_summary = []
    for item in cart_items:
        address = item.address  # –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –∏–∑ Cart, –∞ –Ω–µ –∏–∑ POST
        text = item.card_text
        signature = item.signature

        # –õ–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∏
        if text and signature:
            card_info = [
                ("–¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ:", text),
                ("–ü–æ–¥–ø–∏—Å—å:", signature)
            ]
        elif text:
            card_info = [
                ("–¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ:", text),
                ("–ü–æ–¥–ø–∏—Å—å:", "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏")
            ]
        elif signature:
            card_info = [
                ("–¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ:", signature)  # –ü–æ–¥–ø–∏—Å—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ
            ]
        else:
            card_info = [
                ("–¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ:", "–ë–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∫–∏")
            ]

        order_summary.append({
            "bouquet_name": item.product.name,
            "delivery_address": address,
            "card_info": card_info,  # ‚úÖ –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä
            "price": item.product.price,
        })

    return render(request, "main/cart_confirm.html", {
        "order_summary": order_summary,
        "total_price": sum(item.product.price for item in cart_items),
    })


# –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
def finalize_order(request):
    if not request.user.is_authenticated:
        return redirect('login')

    cart_items = Cart.objects.filter(user=request.user)
    if not cart_items:
        messages.error(request, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.")
        return redirect('cart')

    user = request.user
    telegram_chat_id = user.telegram_chat_id

    for item in cart_items:
        print(f"üìå –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞–∫–∞–∑ –¥–ª—è {user.username}: {item.product.name}")
        print(f"‚û° –ê–¥—Ä–µ—Å: {item.address}")
        print(f"‚û° –¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏: {item.card_text}")
        print(f"‚û° –ü–æ–¥–ø–∏—Å—å: {item.signature}")

        order = Order.objects.create(
            user=user,
            telegram_chat_id=telegram_chat_id,
            status='accepted',
            total_price=item.product.price,
            address=item.address,  # ‚úÖ –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Cart!
            card_text=item.card_text,
            signature=item.signature,
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
        message_text = f"üõç –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!\n\n"
        for item in cart_items:
            message_text += f"üå∏ *–ë—É–∫–µ—Ç:* {item.product.name}\n"
            message_text += f"üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* {item.address}\n"

            if item.card_text and item.signature:
                message_text += f"üíå *–¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ:* {item.card_text}\n‚úç *–ü–æ–¥–ø–∏—Å—å:* {item.signature}\n"
            elif item.card_text:
                message_text += f"üíå *–¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ:* {item.card_text}\n‚úç *–ü–æ–¥–ø–∏—Å—å:* –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏\n"
            elif item.signature:
                message_text += f"üíå *–¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ:* {item.signature}\n"
            else:
                message_text += f"üíå *–¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ:* –ë–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∫–∏\n"

            message_text += f"üí∞ *–¶–µ–Ω–∞:* {item.product.price} —Ä—É–±.\n"
            message_text += "------------------------\n"

        message_text += "üì¶ –û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞!\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑
        order.products.set([item.product])
        order.save()


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å Telegram ID
        if telegram_chat_id:
            response = send_telegram_message(telegram_chat_id, message_text)
            print("üì® –û—Ç–≤–µ—Ç Telegram API:", response)  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        else:
            print("‚ö† –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç Telegram ID, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")


    cart_items.delete()  # ‚úÖ –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É

    return redirect('user_orders')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã"



# –ü–æ–¥—Ç–≤–µ—Ä–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
def order_success(request):
    return render(request, 'main/order_success.html')


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
def user_orders(request):
    if not request.user.is_authenticated:
        return redirect('login')

    orders = Order.objects.filter(user=request.user).order_by('-created_at')

    # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    status_translation = {
        "accepted": "–ü—Ä–∏–Ω—è—Ç",
        "processing": "–í —Å–±–æ—Ä–∫–µ",
        "delivering": "–í –ø—É—Ç–∏",
        "delivered": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
    }

    formatted_orders = []
    for order in orders:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∫–µ
        if order.card_text and order.signature:
            card_info = [
                ("–¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ:", order.card_text),
                ("–ü–æ–¥–ø–∏—Å—å:", order.signature)
            ]
        elif order.card_text:
            card_info = [
                ("–¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ:", order.card_text),
                ("–ü–æ–¥–ø–∏—Å—å:", "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏")
            ]
        elif order.signature:
            card_info = [
                ("–¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ:", order.signature)
            ]
        else:
            card_info = [
                ("–¢–µ–∫—Å—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∫–µ:", "–ë–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∫–∏")
            ]

        formatted_orders.append({
            "order_id": order.id,
            "status": status_translation.get(order.status, order.status),  # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
            "created_at": order.created_at.strftime("%d %m %Y %H:%M"),  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            "bouquet_name": order.products.first().name,  # –ù–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞
            "delivery_address": order.address if order.address else "–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω",
            "card_info": card_info,  # –û—Ç–∫—Ä—ã—Ç–∫–∞ –∏ –ø–æ–¥–ø–∏—Å—å
            "price": order.total_price,  # –¶–µ–Ω–∞
        })

    return render(request, 'main/orders.html', {'orders': formatted_orders})


# –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
def logout_user(request):
    logout(request)  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return redirect('home')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é


# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def profile(request):
    if not request.user.is_authenticated:
        return redirect('login')

    password_form = PasswordChangeForm(request.user, request.POST or None)
    if request.method == 'POST' and password_form.is_valid():
        password_form.save()
        update_session_auth_hash(request, password_form.user)  # –ß—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–ª–æ
        messages.success(request, "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.")
        return redirect('profile')

    return render(request, 'main/profile.html', {'password_form': password_form})